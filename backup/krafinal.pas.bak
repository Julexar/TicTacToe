unit KraFinal;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, Spieler, Math;

type
    TKraFinal = class(TSpieler)
       public
         procedure calculate; override;
       private
         function falle: boolean;
         function change(rein:double):double;
         function SummeZeile(i:integer):double;
         function SummeSpalte(j:integer):double;
         function SummeDiag1:double;
         function SummeDiag2:double;
    end;


implementation

uses spielfeld;

procedure TKraFinal.calculate;                                                       // wird von Spielfeld aufgerufen und ruft in jedem Fall genau einmal Form1.zug auf. Dazu wird jedes Feld bewertet, das wertvollste wird zum Zug gewählt.
var i,j,x,y:integer;
  sum,sumMax:double;
  z: string;                                                                         // hält fest, ob eine Zufallsendscheidung verwendet wurde.
begin                                                                                //Überprüfung ob der Gegner uns in eine Falle locken will.
  if falle then
  begin
    randomize;                                                                       //Falle wird abgewehrt in dem auf eine zufällig ausgewählte Position der vier mitteleren Randfelder gelegt wird.
    x:=random(4);
    if(x=0) then form1.zug(2,1)
    else if(x=1) then form1.zug(2,3)
    else if(x=2) then form1.zug(1,2)
    else if(x=3) then form1.zug(3,2);
    infos:=infos+#13#10+'Falle '+inttostr(x);                                                    //infos bekommt neue Zeile mit info welche zufallszahl gewählt wurde
  end
  else
    begin
    x:=2;                                                                                        //wenn sich nichts besseres findet, setze auf das Feld in der mitte
    y:=2;                                                                                        //x und y werden die Koordinaten, auf die ich setze
    sumMax:=-1;                                                                                  //wenn noch kein Feld bewertet wurde, ist die beste bewertung -1
    sum:=-2;                                                                                     //ein Feld wird wertvoller, wenn die übrigen beiden Felder in der Reihe vom selben Spieler belegt sind. denn dann kann ich gewinnen oder der Gegner.
    for i:=1 to 3 do
        for j:=1 to 3 do
            if Form1.getBelegung(i,j)=0 then                             //ich untersuche nur Felder, die frei sind.
            begin
              z:='';                                                      //hier findet keine Zufallsendscheidung statt
              sum:=power(summeZeile(i),2)+power(SummeSpalte(j),2);        // sum wird für jedes Feld neu initialisiert.
              if(i=j) then sum:=sum+power(SummeDiag1,2)+0.01;              // diagonalfelder werden auch bei leerem Feld bevorzugt durch +0.01
              if(i+j=4) then sum:=sum+power(SummeDiag2,2)+0.01;            // das Feld in Mitte liegt auf beiden Diagonalen
              if(sum>sumMax) then                                         // wenn i,j besser ist, als das bisher beste Feld.
              begin
                x:=i;
                y:=j;
                sumMax:=sum;                                              //sumMax wird nur überschrieben, wenn ein neues Favoritenfeld gefunden ist.
              end
              else if(sum=sumMax) then                                    //Bei Gleichheit gibt es eine Zufallsendscheidung.
              begin
                z:='Gleichheit';
                if random(2)=0 then
                begin
                  x:=i;
                  y:=j;
                  sumMax:=sum;
                end;
              end;
            end;
    infos:=infos+#13#10+inttostr(x)+'; '+inttostr(y)+z;
    Form1.zug(x,y);                                                     // auf das wertvollste Feld wird gezogen.
    z:='';
  end;
end;

function TKraFinal.falle: boolean;                                                   // überprüft, ob der Gegner versucht mir eine Falle zu stellen.
begin
  result:=false;
  if (SpielerNr=2) and ((summeZeile(1)+SummeZeile(2)+SummeZeile(3))>0.8) then                          //Der Gegner fängt an, Ich habe einmal gelegt, der Gegner zweimal. Nur in dieser Situation ergibt sich eine Summe von größer als 0,8 wenn ich mi tSpielernumemr 2 am Zug bin
  begin
    if (form1.getBelegung(2,2)=2) and (form1.getBelegung(1,1)=1) and (form1.getBelegung(3,3)=1) then            //ich liege in der Mitte, der Gegner hat 1,1 und 3,3
         result:=true;
    if (form1.getBelegung(2,2)=2) and (form1.getBelegung(1,3)=1) and (form1.getBelegung(3,1)=1) then            //ich liege in der Mitte, der Gegner hat 1,3 und 1,3
         result:=true;
  end;
end;

function TKraFinal.change(rein:double):double;                                  //macht aus 2 -1
begin
  if rein=2 then result:=-1
  else result:=rein;
  if (rein=SpielerNR) then result:=result*1.1;                                  //gewinnen ist wichtiger, als nicht zu verlieren.
end;

function TKraFinal.SummeZeile(i:integer):double;                                //Bildet die Summe der gechangten Belegungen der i. Zeile. Felder von verschiedenen Spielern heben sich auf.
begin
  result:=change(Form1.getBelegung(i,1))+change(Form1.getBelegung(i,2))+change(Form1.getBelegung(i,3))
end;

function TKraFinal.SummeSpalte(j:integer):double;                              //Bildet die Summe der gechangten Belegungen der j. Spalte.
begin
  result:=change(Form1.getBelegung(1,j))+change(Form1.getBelegung(2,j))+change(Form1.getBelegung(3,j))
end;

function TKraFinal.SummeDiag1:double;                                          //Bildet die Summe der gechangten Belegungen der 1. Diagonale.
begin
  result:=change(Form1.getBelegung(1,1))+change(Form1.getBelegung(2,2))+change(Form1.getBelegung(3,3))
end;

function TKraFinal.SummeDiag2:double;                                          //Bildet die Summe der gechangten Belegungen der 2. Diagonale.
begin
  result:=change(Form1.getBelegung(3,1))+change(Form1.getBelegung(2,2))+change(Form1.getBelegung(1,3))
end;

end.

